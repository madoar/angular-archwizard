// color definitions
$wz-color-default: #E6E6E6;
$wz-color-current: #808080;
$wz-color-done: #339933;
$wz-color-optional: #38ef38;
$wz-color-editing: #FF0000;

// dot definitions
$dot-border-width: 2px;

// small definitions
$small-dot-width: 14px;
$small-dot-height: 14px;

// big definitions
$big-dot-width: 50px;
$big-dot-height: 50px;

// extra distance between the bottom of the dots and the baseline texts
$dot-baseline-distance: 0px;

// padding between text and baseline
$text-margin-left: 15px;
$text-height: 14px;

// distance between steps
$distance-between-steps: 10px;


// Temporary variables used to pass parameters from the `define-style` mixin to its content block.
// They will no longer be needed after content arguments support is released:
// - https://github.com/sass/sass/issues/871
// - https://github.com/sass/libsass/releases
// - https://github.com/sass/node-sass/releases/
//
// Using global variables is the recommended workaround
//
// - https://github.com/sass/sass/issues/626#issuecomment-345432420
// - https://github.com/sass/sass/issues/871

// indicator state: 'default' or 'hover'
$wz-indicator-state_: null !global;

// base color for one of possible indicator states (default, current, done etc.).
$wz-indicator-color_: null !global;


@mixin line($dot-width, $dot-height, $line-color) {
  background-color: $line-color;
  content: '';
  position: absolute;
  left: -($dot-baseline-distance + $dot-height / 2);
  top: $dot-height;
  height: calc(100% - #{$dot-height});
  width: 1px;
}

@mixin state-circle($dot-width, $dot-height, $dot-border-width) {
  position: absolute;
  top: 0;
  left: -($dot-baseline-distance + $dot-width);
  width: $dot-width;
  height: $dot-height;
  text-align: center;
  vertical-align: middle;
  line-height: $dot-height - 2 * $dot-border-width;
  transition: 0.25s;
  border-radius: 100%;
}
@mixin state-circle-hover($dot-width, $dot-height, $dot-border-width) { }

@mixin state-circle-with-border($color) {
  border-width: $wz-indicator-border-width_;
  border-style: solid;
  border-color: $color;
}
@mixin state-circle-with-border-hover($color) {
  border-color: darken($color, 10%);
}

@mixin state-circle-with-border-and-content($color) {
  @include state-circle-with-border($color);
  color: $color;
}
@mixin state-circle-with-border-and-content-hover($color) {
  @include state-circle-with-border-hover($color);
  color: darken($color, 10%);
}

@mixin state-circle-with-background($color) {
  background-color: $color;
}
@mixin state-circle-with-background-hover($color) {
  background-color: darken($color, 5%);
}

@mixin state-circle-with-background-and-content($color) {
  @include state-circle-with-background($color);
  color: black;
}
@mixin state-circle-with-background-and-content-hover($color) {
  @include state-circle-with-background-hover($color);
}


// Helper mixin to define a step indicator style like 'small', 'large-filled-symbols' etc.
//
// Arguments:
//   $width  - step indicator width
//   $height - step indicator height
//   $border-width - step indicator border width
//
// Apart from the arguments, the `define-style` mixin receives a content block,
// which is applied for .step-indicator elements and is expected to customize indicator representation.
// The content block is invoked several times, each time with different arguments passed through global variables:
//
//   - $wz-indicator-state_ - indicator state: 'default' or 'hover'
//   - $wz-indicator-color_ - base color for one of possible indicator states (default, current, done etc.)
//
// In addition to these variables, the content block can use the following
// variables passed through the `define-style` mixin:
//
//   - $wz-indicator-width_ - equals to $width argument of the `define-style` mixin
//   - $wz-indicator-height_ - equals to $height argument of the `define-style` mixin
//   - $wz-indicator-border-width_ - equals to $border-width argument of the `define-style` mixin
//
@mixin define-style($width: $big-dot-height, $height: $big-dot-height, $border-width: $dot-border-width) {

  // Make variables accessible from the content block
  $wz-indicator-width_: $width !global;
  $wz-indicator-height_: $height !global;
  $wz-indicator-border-width_: $border-width !global;

  padding: ($distance-between-steps / 2) ($distance-between-steps / 2) ($distance-between-steps / 2) ($distance-between-steps / 2 + $dot-baseline-distance + $height);

  li {
    &:not(:last-child):before {
      @include line($width, $height, $wz-color-default);
    }

    a {
      min-height: $height;
    }

    .step-indicator {
      @include state-circle($width, $height, $border-width);
      $wz-indicator-state_: 'default' !global;
      $wz-indicator-color_: $wz-color-default !global;
      @content;
    }
    &.optional .step-indicator {
      $wz-indicator-state_: 'default' !global;
      $wz-indicator-color_: $wz-color-optional !global;
      @content;
    }
    &.done .step-indicator,
    &.completed .step-indicator {
      $wz-indicator-state_: 'default' !global;
      $wz-indicator-color_: $wz-color-done !global;
      @content;
    }
    &.current .step-indicator {
      $wz-indicator-state_: 'default' !global;
      $wz-indicator-color_: $wz-color-current !global;
      @content;
    }
    &.current.done .step-indicator,
    &.current.completed .step-indicator {
      $wz-indicator-state_: 'default' !global;
      $wz-indicator-color_: $wz-color-editing !global;
      @content;
    }

    &.navigable a:hover .step-indicator {
      @include state-circle-hover($width, $height, $border-width);
      $wz-indicator-state_: 'hover' !global;
      $wz-indicator-color_: $wz-color-default !global;
      @content;
    }
    &.navigable.optional a:hover .step-indicator {
      $wz-indicator-state_: 'hover' !global;
      $wz-indicator-color_: $wz-color-optional !global;
      @content;
    }
    &.navigable.done, &.navigable.completed {
      a:hover .step-indicator {
        $wz-indicator-state_: 'hover' !global;
        $wz-indicator-color_: $wz-color-done !global;
        @content;
      }
    }
    &.navigable.current a:hover .step-indicator {
      $wz-indicator-state_: 'hover' !global;
      $wz-indicator-color_: $wz-color-current !global;
      @content;
    }
    &.navigable.current.done, &.navigable.current.completed {
      a:hover .step-indicator {
        $wz-indicator-state_: 'hover' !global;
        $wz-indicator-color_: $wz-color-editing !global;
        @content;
      }
    }
  }
}

aw-wizard-navigation-bar.vertical {
  max-width: 280px;
  width: 20%;
  height: 100%;
  position: sticky;
  top: 0;

  &.small ul.steps-indicator {
    @include define-style($width: $small-dot-width, $height: $small-dot-height, $border-width: 0) {
      @if ($wz-indicator-state_ == 'default') {
        @include state-circle-with-background($wz-indicator-color_);
      }
      @else {
        @include state-circle-with-background-hover($wz-indicator-color_);
      }
    }
  }

  &.large-filled ul.steps-indicator {
    @include define-style($border-width: 0) {
      @if ($wz-indicator-state_ == 'default') {
        @include state-circle-with-background($wz-indicator-color_);
      }
      @else {
        @include state-circle-with-background-hover($wz-indicator-color_);
      }
    }
  }

  &.large-empty ul.steps-indicator {
    @include define-style() {
      @if ($wz-indicator-state_ == 'default') {
        @include state-circle-with-border($wz-indicator-color_);
      }
      @else {
        @include state-circle-with-border-hover($wz-indicator-color_);
      }
    }
  }

  &.large-filled-symbols ul.steps-indicator {
    @include define-style($border-width: 0) {
      @if ($wz-indicator-state_ == 'default') {
        @include state-circle-with-background-and-content($wz-indicator-color_);
      }
      @else {
        @include state-circle-with-background-and-content-hover($wz-indicator-color_);
      }
    }
  }

  &.large-empty-symbols ul.steps-indicator {
    @include define-style() {
      @if ($wz-indicator-state_ == 'default') {
        @include state-circle-with-border-and-content($wz-indicator-color_);
      }
      @else {
        @include state-circle-with-border-and-content-hover($wz-indicator-color_);
      }
    }
  }

  ul.steps-indicator {
    display: flex;
    flex-direction: column;
    justify-content: center;

    list-style: none;
    margin: auto;

    // http://www.paulirish.com/2012/box-sizing-border-box-ftw/
    * {
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
    }

    li {
      position: relative;
      pointer-events: none;

      &:not(:last-child) {
        margin-bottom: 0;
        padding-bottom: $distance-between-steps;
      }

      a {
        // center labels vertically
        display: flex;
        flex-direction: row;
        align-items: center;

        .label {
          margin-left: $text-margin-left;
          color: $wz-color-current;
          line-height: $text-height;
          font-size: $text-height;
          text-decoration: none;
          text-transform: uppercase;
          text-align: left;
          font-weight: bold;
          transition: 0.25s;
        }
      }
    }

    li.navigable {
      pointer-events: auto;

      a {
        cursor: pointer;
      }

      a:hover .label {
        color: darken($wz-color-current, 20%);
      }
    }
  }
}
